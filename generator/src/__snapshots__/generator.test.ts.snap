// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`array of a primitive type 1`] = `
"export function isX(root: unknown): root is X {
    type Element = X[number];
    function isElement(root: unknown): root is Element {
        if (!(typeof root === "number")) {
            return false;
        }
        (root) satisfies Element;
        return true;
    }
    if (!(safeIsArray(root) && root.every(isElement))) {
        return false;
    }
    (root) satisfies X;
    return true;
}
"
`;

exports[`array of a primitive type union 1`] = `
"export function isX(root: unknown): root is X {
    type Element = X[number];
    function isElement(root: unknown): root is Element {
        if (!((typeof root === "number") || (typeof root === "string"))) {
            return false;
        }
        (root) satisfies Element;
        return true;
    }
    if (!(safeIsArray(root) && root.every(isElement))) {
        return false;
    }
    (root) satisfies X;
    return true;
}
"
`;

exports[`array of an object type 1`] = `
"export function isX(root: unknown): root is X {
    type Element = X[number];
    function isElement(root: unknown): root is Element {
        if (!(typeof root === "object" && root !== null)) {
            return false;
        }
        (root) satisfies {};
        const { a, b }: SafeShallowShape<Element> = root;
        if (!(typeof a === "number")) {
            return false;
        }
        if (!(typeof b === "string")) {
            return false;
        }
        ({
            a,
            b
        }) satisfies Element;
        return true;
    }
    if (!(safeIsArray(root) && root.every(isElement))) {
        return false;
    }
    (root) satisfies X;
    return true;
}
"
`;

exports[`both object and array 1`] = `
"import { type X } from "./guards.ts";
type SafeShallowShape<Type extends {}> = {
    [_ in keyof Type]?: unknown;
};
const safeIsArray: (v: unknown) => v is unknown[] = Array.isArray;
export function isX(root: unknown): root is X {
    type Element = X[number];
    function isElement(root: unknown): root is Element {
        if (!(typeof root === "object" && root !== null)) {
            return false;
        }
        (root) satisfies {};
        ({}) satisfies Element;
        return true;
    }
    if (!(safeIsArray(root) && root.every(isElement))) {
        return false;
    }
    (root) satisfies X;
    return true;
}
"
`;

exports[`empty object 1`] = `
"export function isX(root: unknown): root is X {
    if (!(typeof root === "object" && root !== null)) {
        return false;
    }
    (root) satisfies {};
    ({}) satisfies X;
    return true;
}
"
`;

exports[`nested arrays of a primitive type 1`] = `
"export function isX(root: unknown): root is X {
    type Element = X[number];
    function isElement(root: unknown): root is Element {
        type Element_Element = Element[number];
        function isElement_Element(root: unknown): root is Element_Element {
            type Element_Element_Element = Element_Element[number];
            function isElement_Element_Element(root: unknown): root is Element_Element_Element {
                if (!(typeof root === "number")) {
                    return false;
                }
                (root) satisfies Element_Element_Element;
                return true;
            }
            if (!(safeIsArray(root) && root.every(isElement_Element_Element))) {
                return false;
            }
            (root) satisfies Element_Element;
            return true;
        }
        if (!(safeIsArray(root) && root.every(isElement_Element))) {
            return false;
        }
        (root) satisfies Element;
        return true;
    }
    if (!(safeIsArray(root) && root.every(isElement))) {
        return false;
    }
    (root) satisfies X;
    return true;
}
"
`;

exports[`nested object 1`] = `
"export function isX(root: unknown): root is X {
    if (!(typeof root === "object" && root !== null)) {
        return false;
    }
    (root) satisfies {};
    const { a }: SafeShallowShape<X> = root;
    if (!(typeof a === "object" && a !== null)) {
        return false;
    }
    (a) satisfies {};
    const { b }: SafeShallowShape<X["a"]> = a;
    if (!(typeof b === "object" && b !== null)) {
        return false;
    }
    (b) satisfies {};
    const { c }: SafeShallowShape<X["a"]["b"]> = b;
    if (!(typeof c === "string")) {
        return false;
    }
    ({
        a: {
            b: {
                c
            }
        }
    }) satisfies X;
    return true;
}
"
`;

exports[`no models 1`] = `
"import {} from "./guards.ts";
"
`;

exports[`null 1`] = `
"export function isX(root: unknown): root is X {
    if (!(root === null)) {
        return false;
    }
    (root) satisfies X;
    return true;
}
"
`;

exports[`object with primitive types 1`] = `
"export function isX(root: unknown): root is X {
    if (!(typeof root === "object" && root !== null)) {
        return false;
    }
    (root) satisfies {};
    const { a, b, c }: SafeShallowShape<X> = root;
    if (!(typeof a === "number")) {
        return false;
    }
    if (!(typeof b === "string")) {
        return false;
    }
    if (!(typeof c === "boolean")) {
        return false;
    }
    ({
        a,
        b,
        c
    }) satisfies X;
    return true;
}
"
`;

exports[`only array 1`] = `
"import { type X } from "./guards.ts";
const safeIsArray: (v: unknown) => v is unknown[] = Array.isArray;
export function isX(root: unknown): root is X {
    type Element = X[number];
    function isElement(root: unknown): root is Element {
        if (!(typeof root === "string")) {
            return false;
        }
        (root) satisfies Element;
        return true;
    }
    if (!(safeIsArray(root) && root.every(isElement))) {
        return false;
    }
    (root) satisfies X;
    return true;
}
"
`;

exports[`only object 1`] = `
"import { type X } from "./guards.ts";
type SafeShallowShape<Type extends {}> = {
    [_ in keyof Type]?: unknown;
};
export function isX(root: unknown): root is X {
    if (!(typeof root === "object" && root !== null)) {
        return false;
    }
    (root) satisfies {};
    ({}) satisfies X;
    return true;
}
"
`;

exports[`reference type in a union 1`] = `
"export function isX(root: unknown): root is X {
    if (!((typeof root === "number") || (isA(root)))) {
        return false;
    }
    (root) satisfies X;
    return true;
}
"
`;

exports[`reference type in an object 1`] = `
"export function isX(root: unknown): root is X {
    if (!(typeof root === "object" && root !== null)) {
        return false;
    }
    (root) satisfies {};
    const { a, b }: SafeShallowShape<X> = root;
    if (!(isA(a))) {
        return false;
    }
    if (!(isB(b))) {
        return false;
    }
    ({
        a,
        b
    }) satisfies X;
    return true;
}
"
`;

exports[`two arrays of a primitive type 1`] = `
"export function isX(root: unknown): root is X {
    type Element = X["a"][number];
    function isElement(root: unknown): root is Element {
        if (!(typeof root === "number")) {
            return false;
        }
        (root) satisfies Element;
        return true;
    }
    type B_Element = X["b"][number];
    function isB_Element(root: unknown): root is B_Element {
        if (!(typeof root === "string")) {
            return false;
        }
        (root) satisfies B_Element;
        return true;
    }
    if (!(typeof root === "object" && root !== null)) {
        return false;
    }
    (root) satisfies {};
    const { a, b }: SafeShallowShape<X> = root;
    if (!(safeIsArray(a) && a.every(isElement))) {
        return false;
    }
    if (!(safeIsArray(b) && b.every(isB_Element))) {
        return false;
    }
    ({
        a,
        b
    }) satisfies X;
    return true;
}
"
`;

exports[`undefined 1`] = `
"export function isX(root: unknown): root is X {
    if (!(typeof root === "undefined")) {
        return false;
    }
    (root) satisfies X;
    return true;
}
"
`;

exports[`union of literal types 1`] = `
"export function isX(root: unknown): root is X {
    if (!((root === "a") || (root === "b") || (root === 1) || (root === 2) || (root === true) || (root === false) || (root === null) || (typeof root === "undefined"))) {
        return false;
    }
    (root) satisfies X;
    return true;
}
"
`;

exports[`union of mixed safe types 1`] = `
"export function isX(root: unknown): root is X {
    if (!((typeof root === "number") || (root === "a") || (root === true))) {
        return false;
    }
    (root) satisfies X;
    return true;
}
"
`;

exports[`union of object and safe union types 1`] = `
"export function isUnion(root: unknown): root is Union {
    type ObjectInUnion = Extract<Union, object>;
    function isObjectInUnion(root: unknown): root is ObjectInUnion {
        if (!(typeof root === "object" && root !== null)) {
            return false;
        }
        (root) satisfies {};
        const { a }: SafeShallowShape<ObjectInUnion> = root;
        if (!(typeof a === "number")) {
            return false;
        }
        ({
            a
        }) satisfies ObjectInUnion;
        return true;
    }
    if (!((root === 1) || (typeof root === "string") || (isObjectInUnion(root)))) {
        return false;
    }
    (root) satisfies Union;
    return true;
}
"
`;

exports[`union of primitive and literal types 1`] = `
"export function isUnion(root: unknown): root is Union {
    if (!((typeof root === "string") || (typeof root === "number") || (root === null))) {
        return false;
    }
    (root) satisfies Union;
    return true;
}
"
`;
