// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`array 1`] = `
"import { expect, describe, it } from "vitest";
import { isX } from "guards.ts";
const invalidValue: any = Symbol("invalidValue");
const valid_X = [
    [],
    ["string"]
];
const invalid_X = [
    invalidValue,
    [invalidValue]
];
describe("X", () => {
    it.for(valid_X)("valid", (value: unknown) => {
        expect(isX(value)).toBe(true);
    });
    it.for(invalid_X)("invalid", (value: unknown) => {
        expect(isX(value)).toBe(false);
    });
});
"
`;

exports[`multiple types 1`] = `
"import { expect, describe, it } from "vitest";
import { isX, isY } from "guards.ts";
const invalidValue: any = Symbol("invalidValue");
const valid_X = [
    "string",
    0,
    42
];
const invalid_X = [
    invalidValue
];
describe("X", () => {
    it.for(valid_X)("valid", (value: unknown) => {
        expect(isX(value)).toBe(true);
    });
    it.for(invalid_X)("invalid", (value: unknown) => {
        expect(isX(value)).toBe(false);
    });
});
const valid_Y = [
    null,
    false,
    true
];
const invalid_Y = [
    invalidValue
];
describe("Y", () => {
    it.for(valid_Y)("valid", (value: unknown) => {
        expect(isY(value)).toBe(true);
    });
    it.for(invalid_Y)("invalid", (value: unknown) => {
        expect(isY(value)).toBe(false);
    });
});
"
`;

exports[`object 1`] = `
"import { expect, describe, it } from "vitest";
import { isX } from "guards.ts";
const invalidValue: any = Symbol("invalidValue");
const valid_X = [
    { a: "string", b: 0, c: true },
    { a: "string", b: 0, c: false },
    { a: "string", b: 42, c: true },
    { a: "string", b: 42, c: false }
];
const invalid_X = [
    null,
    { b: 0, c: true },
    { a: invalidValue, b: 0, c: true },
    { a: "string", c: true },
    { a: "string", b: invalidValue, c: true },
    { a: "string", b: 0 },
    { a: "string", b: 0, c: invalidValue },
    { a: "string", b: 42 },
    { a: "string", b: 42, c: invalidValue }
];
describe("X", () => {
    it.for(valid_X)("valid", (value: unknown) => {
        expect(isX(value)).toBe(true);
    });
    it.for(invalid_X)("invalid", (value: unknown) => {
        expect(isX(value)).toBe(false);
    });
});
"
`;

exports[`object with optional attributes 1`] = `
"import { expect, describe, it } from "vitest";
import { isX } from "guards.ts";
const invalidValue: any = Symbol("invalidValue");
const valid_X = [
    { a: 1, c: 3 },
    { a: 1, c: 3, d: undefined },
    { a: 1, c: 3, d: 4 },
    { a: 1, b: undefined, c: 3 },
    { a: 1, b: undefined, c: 3, d: undefined },
    { a: 1, b: undefined, c: 3, d: 4 },
    { a: 1, b: 2, c: 3 },
    { a: 1, b: 2, c: 3, d: undefined },
    { a: 1, b: 2, c: 3, d: 4 }
];
const invalid_X = [
    null,
    { c: 3 },
    { a: invalidValue, c: 3 },
    { a: 1, b: invalidValue, c: 3 },
    { a: 1, b: undefined },
    { a: 1, b: undefined, c: invalidValue },
    { a: 1, b: undefined, c: 3, d: invalidValue },
    { a: 1, b: 2 },
    { a: 1, b: 2, c: invalidValue },
    { a: 1, b: 2, c: 3, d: invalidValue }
];
describe("X", () => {
    it.for(valid_X)("valid", (value: unknown) => {
        expect(isX(value)).toBe(true);
    });
    it.for(invalid_X)("invalid", (value: unknown) => {
        expect(isX(value)).toBe(false);
    });
});
"
`;

exports[`primitive 1`] = `
"import { expect, describe, it } from "vitest";
import { isX } from "guards.ts";
const invalidValue: any = Symbol("invalidValue");
const valid_X = [
    0,
    42
];
const invalid_X = [
    invalidValue
];
describe("X", () => {
    it.for(valid_X)("valid", (value: unknown) => {
        expect(isX(value)).toBe(true);
    });
    it.for(invalid_X)("invalid", (value: unknown) => {
        expect(isX(value)).toBe(false);
    });
});
"
`;

exports[`reference type 1`] = `
"import { expect, describe, it } from "vitest";
import { isA, isB } from "guards.ts";
const invalidValue: any = Symbol("invalidValue");
const valid_A = [
    { a: "string" }
];
const invalid_A = [
    null,
    {},
    { a: invalidValue }
];
describe("A", () => {
    it.for(valid_A)("valid", (value: unknown) => {
        expect(isA(value)).toBe(true);
    });
    it.for(invalid_A)("invalid", (value: unknown) => {
        expect(isA(value)).toBe(false);
    });
});
const valid_B = [
    { b: valid_A[0] }
];
const invalid_B = [
    null,
    {},
    { b: invalid_A[0] }
];
describe("B", () => {
    it.for(valid_B)("valid", (value: unknown) => {
        expect(isB(value)).toBe(true);
    });
    it.for(invalid_B)("invalid", (value: unknown) => {
        expect(isB(value)).toBe(false);
    });
});
"
`;

exports[`union 1`] = `
"import { expect, describe, it } from "vitest";
import { isX } from "guards.ts";
const invalidValue: any = Symbol("invalidValue");
const valid_X = [
    "string",
    0,
    42
];
const invalid_X = [
    invalidValue
];
describe("X", () => {
    it.for(valid_X)("valid", (value: unknown) => {
        expect(isX(value)).toBe(true);
    });
    it.for(invalid_X)("invalid", (value: unknown) => {
        expect(isX(value)).toBe(false);
    });
});
"
`;
