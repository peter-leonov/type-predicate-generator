// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`array 1`] = `
"import { expect, describe, it } from "vitest";
import { isX } from "guards.ts";
const invalidValue: any = Symbol("invalidValue");
const valid_X = [
    [],
    ["string"]
];
const invalid_X = [
    invalidValue,
    [invalidValue]
];
describe("X", () => {
    it.for(valid_X)("valid", value => {
        expect(isX(value)).toBe(true);
    });
    it.for(invalid_X)("invalid", value => {
        expect(isX(value)).toBe(false);
    });
});
"
`;

exports[`multiple types 1`] = `
"import { expect, describe, it } from "vitest";
import { isX, isY } from "guards.ts";
const invalidValue: any = Symbol("invalidValue");
const valid_X = [
    "string",
    0,
    42
];
const invalid_X = [
    invalidValue
];
describe("X", () => {
    it.for(valid_X)("valid", value => {
        expect(isX(value)).toBe(true);
    });
    it.for(invalid_X)("invalid", value => {
        expect(isX(value)).toBe(false);
    });
});
const valid_Y = [
    null,
    false,
    true
];
const invalid_Y = [
    invalidValue
];
describe("Y", () => {
    it.for(valid_Y)("valid", value => {
        expect(isY(value)).toBe(true);
    });
    it.for(invalid_Y)("invalid", value => {
        expect(isY(value)).toBe(false);
    });
});
"
`;

exports[`object 1`] = `
"import { expect, describe, it } from "vitest";
import { isX } from "guards.ts";
const invalidValue: any = Symbol("invalidValue");
const valid_X = [
    { "a": "string", "b": 0, "c": true },
    { "a": "string", "b": 0, "c": false },
    { "a": "string", "b": 42, "c": true },
    { "a": "string", "b": 42, "c": false }
];
const invalid_X = [
    null,
    { "b": 0, "c": true },
    { "b": 0, "c": false },
    { "b": 42, "c": true },
    { "b": 42, "c": false },
    { "a": invalidValue, "b": 0, "c": true },
    { "a": invalidValue, "b": 0, "c": false },
    { "a": invalidValue, "b": 42, "c": true },
    { "a": invalidValue, "b": 42, "c": false },
    { "a": "string", "c": true },
    { "a": "string", "c": false },
    { "a": "string", "b": invalidValue, "c": true },
    { "a": "string", "b": invalidValue, "c": false },
    { "a": "string", "b": 0 },
    { "a": "string", "b": 0, "c": invalidValue },
    { "a": "string", "b": 42 },
    { "a": "string", "b": 42, "c": invalidValue }
];
describe("X", () => {
    it.for(valid_X)("valid", value => {
        expect(isX(value)).toBe(true);
    });
    it.for(invalid_X)("invalid", value => {
        expect(isX(value)).toBe(false);
    });
});
"
`;

exports[`primitive 1`] = `
"import { expect, describe, it } from "vitest";
import { isX } from "guards.ts";
const invalidValue: any = Symbol("invalidValue");
const valid_X = [
    0,
    42
];
const invalid_X = [
    invalidValue
];
describe("X", () => {
    it.for(valid_X)("valid", value => {
        expect(isX(value)).toBe(true);
    });
    it.for(invalid_X)("invalid", value => {
        expect(isX(value)).toBe(false);
    });
});
"
`;

exports[`reference type 1`] = `
"import { expect, describe, it } from "vitest";
import { isA, isB } from "guards.ts";
const invalidValue: any = Symbol("invalidValue");
const valid_A = [
    { "a": "string" }
];
const invalid_A = [
    null,
    {},
    { "a": invalidValue }
];
describe("A", () => {
    it.for(valid_A)("valid", value => {
        expect(isA(value)).toBe(true);
    });
    it.for(invalid_A)("invalid", value => {
        expect(isA(value)).toBe(false);
    });
});
const valid_B = [
    { "b": valid_A[1] }
];
const invalid_B = [
    null,
    {},
    { "b": invalid_A[1] }
];
describe("B", () => {
    it.for(valid_B)("valid", value => {
        expect(isB(value)).toBe(true);
    });
    it.for(invalid_B)("invalid", value => {
        expect(isB(value)).toBe(false);
    });
});
"
`;

exports[`union 1`] = `
"import { expect, describe, it } from "vitest";
import { isX } from "guards.ts";
const invalidValue: any = Symbol("invalidValue");
const valid_X = [
    "string",
    0,
    42
];
const invalid_X = [
    invalidValue
];
describe("X", () => {
    it.for(valid_X)("valid", value => {
        expect(isX(value)).toBe(true);
    });
    it.for(invalid_X)("invalid", value => {
        expect(isX(value)).toBe(false);
    });
});
"
`;
