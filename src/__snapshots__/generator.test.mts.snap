// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`array of a primitive type 1`] = `
"export function isX(root: unknown): root is X {
    type Element = X[number];
    function isElement(root: unknown): root is Element {
        if (!(typeof root === "number")) {
            return false;
        }
        ensureType<Element>(root);
        return true;
    }
    if (!(safeIsArray(root) && root.every(isElement))) {
        return false;
    }
    ensureType<X>(root);
    return true;
}
"
`;

exports[`nested object 1`] = `
"export function isX(root: unknown): root is X {
    if (!(typeof root === "object" && root !== null)) {
        return false;
    }
    const { a }: SafeShallowShape<X> = root;
    if (!(typeof a === "object" && a !== null)) {
        return false;
    }
    const { b }: SafeShallowShape<X["a"]> = a;
    if (!(typeof b === "object" && b !== null)) {
        return false;
    }
    const { c }: SafeShallowShape<X["a"]["b"]> = b;
    if (!(typeof c === "string")) {
        return false;
    }
    ensureType<X>({
        a: {
            b: {
                c
            }
        }
    });
    return true;
}
"
`;

exports[`null 1`] = `
"export function isX(root: unknown): root is X {
    if (!(root === null)) {
        return false;
    }
    ensureType<X>(root);
    return true;
}
"
`;

exports[`object with primitive types 1`] = `
"export function isX(root: unknown): root is X {
    if (!(typeof root === "object" && root !== null)) {
        return false;
    }
    const { a, b, c }: SafeShallowShape<X> = root;
    if (!(typeof a === "number")) {
        return false;
    }
    if (!(typeof b === "string")) {
        return false;
    }
    if (!(typeof c === "boolean")) {
        return false;
    }
    ensureType<X>({
        a,
        b,
        c
    });
    return true;
}
"
`;

exports[`reference type in a union 1`] = `
"export function isX(root: unknown): root is X {
    if (!((typeof root === "number") || (isA(root)))) {
        return false;
    }
    ensureType<X>(root);
    return true;
}
"
`;

exports[`reference type in an object 1`] = `
"export function isX(root: unknown): root is X {
    if (!(typeof root === "object" && root !== null)) {
        return false;
    }
    const { a, b }: SafeShallowShape<X> = root;
    if (!(isA(a))) {
        return false;
    }
    if (!(isB(b))) {
        return false;
    }
    ensureType<X>({
        a,
        b
    });
    return true;
}
"
`;

exports[`undefined 1`] = `
"export function isX(root: unknown): root is X {
    if (!(root === undefined)) {
        return false;
    }
    ensureType<X>(root);
    return true;
}
"
`;

exports[`union of primitive and literal types 1`] = `
"export function isUnion(root: unknown): root is Union {
    if (!((typeof root === "string") || (typeof root === "number") || (root === null))) {
        return false;
    }
    ensureType<Union>(root);
    return true;
}
"
`;
