// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`null 1`] = `
"function isX(root: unknown): root is X {
    if (!(root === null)) {
        return false;
    }
    const _root_type_assertion: X = root;
}
"
`;

exports[`object with primitive types 1`] = `
"function isX(root: unknown): root is X {
    if (!(typeof root === "object" && root !== null)) {
        return false;
    }
    const { a, b, c }: SafeShallowShape<X> = root;
    if (!(typeof a === "number")) {
        return false;
    }
    if (!(typeof b === "string")) {
        return false;
    }
    if (!(typeof c === "boolean")) {
        return false;
    }
    const _root_type_assertion: X = {
        a,
        b,
        c
    };
}
"
`;

exports[`reference type in a union 1`] = `
"function isX(root: unknown): root is X {
    if (!((typeof root === "number") || (isA(root)))) {
        return false;
    }
    const _root_type_assertion: X = root;
}
"
`;

exports[`reference type in an object 1`] = `
"function isX(root: unknown): root is X {
    if (!(typeof root === "object" && root !== null)) {
        return false;
    }
    const { a, b }: SafeShallowShape<X> = root;
    if (!(isA(a))) {
        return false;
    }
    if (!(isB(b))) {
        return false;
    }
    const _root_type_assertion: X = {
        a,
        b
    };
}
"
`;

exports[`undefined 1`] = `
"function isX(root: unknown): root is X {
    if (!(root === undefined)) {
        return false;
    }
    const _root_type_assertion: X = root;
}
"
`;

exports[`union of primitive and literal types 1`] = `
"function isUnion(root: unknown): root is Union {
    if (!((typeof root === "string") || (typeof root === "number") || (root === null))) {
        return false;
    }
    const _root_type_assertion: Union = root;
}
"
`;
